{"version":3,"sources":["types/FilterBy.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterBy","TodoList","todos","onSelectedTodo","selectedTodo","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","query","onSetQuery","onChangeFilter","handleSelect","useCallback","event","target","value","All","Active","Completed","onChange","Object","values","current","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","onHide","useState","user","setUser","isError","setIsError","isLoading","setIsLoading","getUserFromApi","a","userFromApi","useEffect","displayModal","href","email","name","App","setTodos","selectedTodoId","setSelectedTodoId","setQuery","filterBy","setFilterBy","getTodosFromApi","todosFromApi","visibleTodos","filter","todosToFilter","toLowerCase","includes","getVisibleTodos","changeSelectedTodo","activeTodo","useMemo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05a9b75f.chunk.js","sourcesContent":["export enum FilterBy {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onSelectedTodo: (id: number) => void,\n  selectedTodo: number,\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    onSelectedTodo,\n    selectedTodo,\n  },\n) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={cn(\n              { 'has-background-info-light': selectedTodo },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelectedTodo(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn('far', {\n                      'fa-eye': selectedTodo !== todo.id,\n                      'fa-eye-slash': selectedTodo === todo.id,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useCallback } from 'react';\nimport { FilterBy } from '../../types/FilterBy';\n\ntype Props = {\n  query: string,\n  onSetQuery: (input: string) => void,\n  onChangeFilter: (value: FilterBy) => void\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    query,\n    onSetQuery,\n    onChangeFilter,\n  },\n) => {\n  const handleSelect = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      switch (event.target.value) {\n        case FilterBy.All:\n          onChangeFilter(FilterBy.All);\n          break;\n\n        case FilterBy.Active:\n          onChangeFilter(FilterBy.Active);\n          break;\n\n        case FilterBy.Completed:\n          onChangeFilter(FilterBy.Completed);\n          break;\n\n        default:\n          break;\n      }\n    }, [],\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n          >\n            {Object.values(FilterBy).map(current => (\n              <option value={current}>\n                {`${current[0].toUpperCase() + current.slice(1)}`}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onSetQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => (onSetQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { FilterBy } from './types/FilterBy';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  query: string,\n  filter: FilterBy,\n) => {\n  let todosToFilter = todos;\n\n  switch (filter) {\n    case FilterBy.Active:\n      todosToFilter = todos.filter(todo => !todo.completed);\n      break;\n\n    case FilterBy.Completed:\n      todosToFilter = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return todosToFilter.filter(todo => (\n    todo.title.toLowerCase().includes(query.toLowerCase())\n  ));\n};\n","import React, { useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo,\n  onHide: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onHide }) => {\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = todo;\n\n  const [user, setUser] = useState<User>();\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getUserFromApi = async () => {\n    try {\n      const userFromApi = await getUser(userId);\n\n      setUser(userFromApi);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getUserFromApi();\n  }, []);\n\n  const displayModal = !isLoading && !isError && user;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && (\n        <Loader />)}\n      {displayModal && (\n        <div\n          className={cn(\n            'modal-card',\n            'notification',\n            {\n              'is-success': completed,\n              'is-danger': !completed,\n            },\n          )}\n        >\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onHide}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block has-text-dark\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong\n                className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n      {isError && (\n        <div className=\"modal-card notification is-danger\">\n          <header className=\"modal-card-head\">\n            <div className=\"modal-card-title\">\n              Error\n            </div>\n            <button\n              aria-label=\"close-modal-button\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onHide}\n            />\n          </header>\n\n          <article className=\"modal-card-body\">\n            <p className=\"block has-text-dark has-text-weight-medium\">\n              The error has happened...\n            </p>\n          </article>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React,\n{\n  useState,\n  useCallback,\n  useEffect,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { FilterBy } from './types/FilterBy';\nimport { getTodos, getVisibleTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState(FilterBy.All);\n\n  const getTodosFromApi = async () => {\n    try {\n      const todosFromApi = await getTodos();\n\n      setTodos(todosFromApi);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromApi();\n  }, []);\n\n  const visibleTodos = getVisibleTodos(todos, query, filterBy);\n\n  const changeSelectedTodo = useCallback((id: number) => {\n    setSelectedTodoId(id);\n  }, []);\n\n  const activeTodo = useMemo(() => (\n    todos.find(({ id }) => id === selectedTodoId)\n  ), [selectedTodoId]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onSetQuery={setQuery}\n                onChangeFilter={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && !isError && (\n                <Loader />\n              )}\n\n              <TodoList\n                todos={visibleTodos}\n                onSelectedTodo={changeSelectedTodo}\n                selectedTodo={selectedTodoId}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {activeTodo && (\n        <TodoModal\n          todo={activeTodo}\n          onHide={() => changeSelectedTodo(0)}\n        />\n      )}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}